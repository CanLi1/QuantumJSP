version: 2

jobs:
  test-3.7: &full-test-template
    docker:
      - image: circleci/python:3.7-stretch

    working_directory: ~/repo/

    steps:
      - checkout

      #TODO: add caching once demos share the same requirements file and can live in the same venv
      #TODO: remove hard code in for-loops
      - run: &install-dependences-template
          name: install dependences
          command: |
            shopt -s extglob

            # Looping through demos
            # Note: code examples within 'examples' dir share a virtual environment
            for demo in !(tests|circuit-fault-diagnosis|qboost); do
              if [ -d "$demo" ]; then
                (
                  env="envs/$demo"
                  python -m virtualenv "$env"
                  . "$env/bin/activate"

                  pip install -r "$demo/requirements_tests.txt"
                )
              fi
            done

      - run: &run-tests-template
          name: run unit tests
          command: |
            shopt -s extglob

            for demo in !(envs|tests|circuit-fault-diagnosis|qboost); do
              if [ -d "$demo" ]; then
                (
                  env="envs/$demo"
                  . "$env/bin/activate"

                  cd "$demo"
                  coverage run -m unittest discover
                )
              fi
            done

  test-3.6:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.6-jessie

  test-3.5:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.5-jessie

  test-2.7:
    # Note: CircleCI's Python 2.7 environment already has virtualenv pre-installed.
    #   Hence, even though it's Python 2.7, `python -m virtualenv ..` works.
    <<: *full-test-template
    docker:
      - image: circleci/python:2.7-jessie

  test-osx-3.7: &osx-tests-template
    macos:
      xcode: "10.1.0"
    environment:
      PYTHON: 3.7.0
      HOMEBREW_NO_AUTO_UPDATE: 1

    working_directory: ~/repo

    steps: 
      - checkout

      - run: 
          name: install pyenv
          command: |
            brew install pyenv

      - run:
          name: install python
          command: |
            pyenv install $PYTHON -s

      #TODO: add caching back in when demos have the same requirements and exist in the same venv
      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python -m pip install virtualenv

      - run: *install-dependences-template

      - run: *run-tests-template

#      - run: *codecov-template

  test-osx-3.6:
    <<: *osx-tests-template
    environment:
      PYTHON: 3.6.5
      HOMEBREW_NO_AUTO_UPDATE: 1

  test-osx-3.5:
    <<: *osx-tests-template
    environment:
      PYTHON: 3.5.5
      HOMEBREW_NO_AUTO_UPDATE: 1

  test-osx-2.7:
    <<: *osx-tests-template
    environment:
      PYTHON: 2.7.15
      HOMEBREW_NO_AUTO_UPDATE: 1

#  test-doctest:
#    docker:
#      - image: circleci/python:3.5-jessie
#
#    working_directory: ~/repo
#
#    steps:
#      - checkout
#
#      - restore_cache:
#          keys:
#          - v1-dependencies-{{ checksum "docs/requirements.txt" }}-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
#
#      - run:
#          name: install dependencies
#          command: |
#            python -m virtualenv env
#            . env/bin/activate
#            pip install -r docs/requirements.txt

#      - save_cache:
#          paths:
#            - ./env
#          key: v1-dependencies-{{ checksum "docs/requirements.txt" }}-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

#      - run:
#          name: doctest
#          command: |
#            . env/bin/activate
#            make -C docs/ doctest

  deploy:
    docker:
      - image: circleci/python:3.6-jessie

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python -m virtualenv env
            . env/bin/activate
            pip install -r requirements.txt

      - run:
          name: install twine
          command: |
            . env/bin/activate
            pip install twine

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            pip install .
            echo $CIRCLE_TAG
            [[ "$(pip show dwave-networkx 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: build sdist and bdist
          command: |
            . env/bin/activate
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: upload
          command: |
            . env/bin/activate
            twine upload dist/*

workflows:
  version: 2
  tests:
    jobs:
      - test-3.7
      - test-3.6
      - test-3.5
      - test-2.7
      - test-osx-3.7
      - test-osx-3.6
      - test-osx-3.5
      - test-osx-2.7
#      - test-doctest

  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
